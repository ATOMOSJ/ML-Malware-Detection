import hashlib
import os
import argparse
import time

def read_sha256_virus_mapping(file_path):
    virus_mapping = {}
    with open(file_path, 'r') as file:
        for line in file:
            parts = line.strip().split(':')
            if len(parts) == 2:
                sha256_hash = parts[0].strip()
                virus_name = parts[1].strip()
                virus_mapping[sha256_hash] = virus_name
    return virus_mapping

def calculate_sha256(file_path):
    sha256_hash = hashlib.sha256()
    with open(file_path, 'rb') as file:
        for chunk in iter(lambda: file.read(4096), b''):
            sha256_hash.update(chunk)
    return sha256_hash.hexdigest()

def system_scan(directory, virus_mapping):
    start_time = time.time()
    scanned_files = 0
    potential_threats = 0
    detected_threats = []  
    
    
    total_files = sum(len(files) for _, _, files in os.walk(directory))

    for root, _, files in os.walk(directory):
        for file_name in files:
            file_path = os.path.join(root, file_name)
            scanned_files += 1

            try:
                sha256_hash = calculate_sha256(file_path)

                if sha256_hash in virus_mapping:
                    virus_name = virus_mapping[sha256_hash]
                    detected_threats.append((file_path, virus_name))  
                    potential_threats += 1

            except Exception as e:
                print(f"Error scanning {file_path}: {e}")
                
           
            progress = int(scanned_files / total_files * 50)
            print(f"\rScanning files: [{'#' * progress}{'.' * (50 - progress)}] {scanned_files}/{total_files}", end="", flush=True)
            
    end_time = time.time() 

    print("\nSystem Scan Complete:")
    print(f"Scanned files: {scanned_files}")
    print(f"Potential threats: {potential_threats}")
    print(f"Time taken: {end_time - start_time:.2f} seconds")

    return detected_threats

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Scan a directory for potential threats.")
    parser.add_argument("directory", help="The directory to scan.")
    parser.add_argument("virus_mapping_file", help="The file containing SHA256 virus mappings.")
    args = parser.parse_args()

    target_directory = args.directory
    virus_mapping_file = args.virus_mapping_file

    if not os.path.isdir(target_directory):
        print(f"Error: {target_directory} is not a valid directory.")
    elif not os.path.isfile(virus_mapping_file):
        print(f"Error: {virus_mapping_file} is not a valid file.")
    else:
        virus_mapping = read_sha256_virus_mapping(virus_mapping_file)
        detected_threats = system_scan(target_directory, virus_mapping)

        unique_viruses = set(virus_name for _, virus_name in detected_threats)

        print("-------------------------------------VIRUS-NAMES-----------------------------------------")
        print("The name of virus detected is:")
        for virus_name in unique_viruses:
            print(f"[{virus_name}]")

        print("------------------------------------FILE-WITH-VIRUS--------------------------------------")
        for file_path, virus_name in detected_threats:
            print(f"File: {file_path} - Virus: {virus_name}")

        print("-----------------------------------------------------------------------------------------")
